package editor.cn;//给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
//
// 
// '.' 匹配任意单个字符 
// '*' 匹配零个或多个前面的那一个元素 
// 
//
// 所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。 
//
// 示例 1： 
//
// 
//输入：s = "aa", p = "a"
//输出：false
//解释："a" 无法匹配 "aa" 整个字符串。
// 
//
// 示例 2: 
//
// 
//输入：s = "aa", p = "a*"
//输出：true
//解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
// 
//
// 示例 3： 
//
// 
//输入：s = "ab", p = ".*"
//输出：true
//解释：".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
// 
//
// 
//
// 提示： 
//
// 
// 1 <= s.length <= 20 
// 1 <= p.length <= 30 
// s 只包含从 a-z 的小写字母。 
// p 只包含从 a-z 的小写字母，以及字符 . 和 *。 
// 保证每次出现字符 * 时，前面都匹配到有效的字符 
// 
//
// Related Topics 递归 字符串 动态规划 👍 3431 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
//class Solution {
//    /*
//    这里.是任意字符，*前面必须有字符，如"c*"表示c为任意个，*不能单独存在
//     */
//    public boolean isMatch(String s, String p) {
//        //dp[i][j]匹配串s中以i-1为结尾的字符串和、模板串p中以j-1为结尾的字符串是否匹配
//        //这里定义[s.length()+1][p.length()+1]是为了留出[0][i]初始化
//        //字符串的0-length-1的内容放进dp数组1-length里面
//        boolean[][]dp=new boolean[s.length()+1][p.length()+1];
//        //定义两个空字符串可以配对
//        dp[0][0]=true;
//        /*对第一行进行初始化（第一列不需要），
//        若模板串是a*b*c这样的形式dp[0][i]主要初始化有*的地方，如p="a*" ==>dp[0][1]=false,dp[0][2]=true
//        但是不是每个有*的地方都要在第一行初始化如"a*ba*"，这里的*管不了字符b，所以s串一定要有字符b，但是s为空
//        所以这里初始化b以前的*即可
//         */
//        for (int i = 2; i <= p.length(); i+=2) {
//           //这里i-1是因为dp数组和字符串的对应有1的差距（如果字符串和dp一一对应就会越界）
//            if(p.charAt(i-1)=='*')dp[0][i]=true;
//            else
//                break;
//        }
//        //进行遍历
//        for (int i = 1; i <= s.length(); i++) {
//            for (int j = 1; j <= p.length(); j++) {
//
//                //j==1不可能走这个if，因为j-1提取的是p第一个字符，第一个字符不可能为*
//                if(p.charAt(j-1)=='*'){
//                    /*如果dp[i][j-2]==true ==> dp[i][j]==true,因为这里的字符依是*
//                    所以*字符前面那个字符可有可无，如果s[0，i-1]和p[0，j-3]可以配对成功
//                    那么s[0,i-1]和p[0,j-1]也可以匹对成功
//                    没有匹配成功也不会影响原值false
//                    */
//                    dp[i][j]=dp[i][j-2];
//                    /*除了上面那种情况可以==>dp[i][j]==true,若s[i-1]==p[j-2]说明字符相等，
//                    或者是p[i-2]=='.'，并且dp[i-1][j]==true也可以 ==> dp[i][j]==true
//                    因为字符相等可以说明字符p[j-2]可以多次使用（"aa","a*"）,再看s[0,i-2]和p[0,j-1]
//                    是否匹配，如果匹配说明p[j-2]这个字符需要用多次，==>dp[i][j]==true,
//                    没有匹配成功也不会影响原值false
//                     */
//                    //这里条件有个!dp[i][j]是如果前面匹配上了这里就不需要比较了
//                    if((s.charAt(i-1)==p.charAt(j-2)||p.charAt(j-2)=='.')&& !dp[i][j])
//                        //来这里说明字符p[i-2]需要用多次，主要就看dp[i-1][j]是不是真了
//                        dp[i][j]=dp[i-1][j];
//                }else {
//                    //来这里说明p[j-1]不是*，我们进行普通的比对即可
//                    //若s[i-1]==p[j-1]说明字符相等，p[i-1]=='.'更是可以匹配万物
//                    if(s.charAt(i-1)==p.charAt(j-1)||p.charAt(j-1)=='.')
//                    //若匹对成功则把dp[i-1][j-1]值赋给dp[i][j]即可（由s[0,i-2]和p[0,j-2]是否为真决定）
//                        dp[i][j]=dp[i-1][j-1];
//
//                }
//            }
//        }
//        //不解释
//        return dp[s.length()][p.length()];
//    }
//
//}
//leetcode submit region end(Prohibit modification and deletion)
